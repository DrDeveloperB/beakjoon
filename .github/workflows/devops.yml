# 이 워크플로우의 이름입니다. GitHub Actions에서 이 워크플로우를 식별하는 데 사용됩니다.
name: Run Python Code
# 워크플로우를 트리거하는 이벤트를 정의합니다.
on:
  # 리포지토리에 푸시가 발생했을 때 워크플로우가 실행됩니다.
  push:
    # devops 브랜치에 푸시될 때 워크플로우가 실행됩니다.
    branches:
      - devops

# 워크플로우에서 실행될 작업을 정의합니다.
jobs:
  myjob:
    runs-on: ubuntu-latest
    steps:
      - name: Step 1
        id: hello
        run: ls -al
        continue-on-error: true
      - name: Step 2
        id: world
        run: ls -al
        continue-on-error: true
      - name: Check on failures
        if: steps.hello.outcome == 'success'
#        if: steps.hello.outcome != 'success' || steps.world.outcome != 'success'
        run: exit 0

  run-code:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.x

      - name: Run Python script
        run: python step/step_2557.py # 이곳에 실제 파이썬 파일명을 적어주세요.

  # 작업(job)의 이름입니다
  test:
    # 작업을 실행할 환경을 정의합니다.
    # 최신 버전의 Ubuntu에서 실행됨을 의미합니다.
    runs-on: ubuntu-latest

    # 작업 내에서 수행할 단계를 정의합니다.
    steps:
      # GitHub의 공식 액션을 사용하여 리포지토리를 체크아웃(checkout)합니다.
      - uses: actions/checkout@v4

      # 이 단계의 이름입니다.
      - name: Set up Python 3.8
        # GitHub의 공식 액션을 사용하여 Python 3.8을 설정합니다.
        uses: actions/setup-python@v5
        # 액션에 전달되는 입력 값들입니다.
        with:
          # 설치할 Python의 버전입니다. 여기서는 3.8을 사용합니다.
          python-version: 3.8

      - name: Install dependencies
        # 쉘 명령어를 실행합니다.
        run: |
          python -m pip install --upgrade pip  # pip을 업그레이드합니다.
          pip install pytest  # pytest를 설치합니다.
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi  # requirements.txt가 있는 경우 종속성을 설치합니다.

      - name: List files for debugging
        # 디렉토리 구조를 나열하여 파일들이 올바르게 체크아웃되었는지 확인합니다.
        run: ls -R

      - name: Run tests
        # 이 단계의 ID입니다. 후속 단계에서 참조할 수 있습니다.
        id: run_tests
        # 테스트를 실행한 후, 오류가 발생해도 exit 코드를 0으로 설정하여 워크플로우가 중단되지 않도록 합니다.
        # 이렇게 하면 후속 단계에서 테스트 결과를 확인할 수 있습니다.
        # true 는 exit 0 과 같은 역할을 한다.
        run: |
          pytest test_1.py > pytest_output.txt 2>&1 || true  # 오류가 발생해도 계속 실행하고 출력을 파일로 리디렉션합니다.
#        run: pytest test_1.py || true
#        run: pytest test_1.py || exit 0
        # pytest는 기본적으로 test_*.py 또는 *_test.py 형식의 파일을 찾고, test_로 시작하는 함수들을 테스트로 인식합니다.
        # pytest를 사용하여 test_1.py 파일의 테스트를 실행합니다.
#        run: |
#          ls -al
#          if [ -f test_1.py ]; then pytest test_1.py; fi

      - name: Check test result
        # 조건을 사용하여 이전 단계의 결과에 따라 Y 또는 N을 출력합니다.
        if: ${{ steps.run_tests.outcome == 'success' }}
        # 이전 단계가 성공했을 경우에만 이 단계를 실행합니다.
#        if: success()
        run: echo Y

      - name: Display error message
        if: ${{ steps.run_tests.outcome == 'failure' }}
        # 이전 단계가 실패했을 경우에만 이 단계를 실행합니다.
#        if: failure()
        run: |
          echo N
          cat pytest_output.txt  # 오류 메시지를 출력합니다.
#        run: |
#          echo N
#          cat $(find . -type f -name "*.log" -print0 | xargs -0 ls -1t | head -1) || true  # 오류 메시지를 출력합니다.