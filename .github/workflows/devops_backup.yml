# DevOps : Development Operations의 약어로, 소프트웨어 개발과 운영을 통합하여 효율성, 협력, 속도, 안정성을 개선하는 개발 및 운영 방법론입니다.
# 소프트웨어 개발부터 배포, 운영, 모니터링까지의 전체 생명주기를 관리하며, 개발과 운영 간의 협업을 강화하여 릴리즈 주기를 단축하고 문제를 신속히 해결할 수 있도록 돕습니다.
# 단순한 개발과 운영의 통합이 아니며, 하나의 언어나 기술을 뜻하는 것도 아니며, 개발과 운영이 가지는 간극을 줄이는 시도로써 하나의 문화이자 방법론으로 볼 수 있습니다.
# DevOps조직문화의 생명은 Speed와 Iteration에 있습니다. 즉, 비즈니스의 요구에 적시에 대처하고 지속적인 개선을 할 수 있어야 합니다.
# 이를 가능하기 위해서는 CI(Continuous Integration-지속통합)와 CD(Continuous Deployment-지속배포)가 자동화 될 필요가 있습니다.
# 다시말해, 각 개발자의 개발 결과가 자동으로 통합되고 배포하는 과정이 물 흐르듯이 연속적으로 이루어져야 한다는 것입니다.

# CI : 지속적 통합 (Continuous Integration)
# 개발 팀이 코드를 지속적으로 통합하고, 이를 자동으로 테스트하여 통합 버그를 최소화하는 프로세스를 의미합니다.
# 코드 변경 사항이 발생 (push)할 때마다 자동으로 빌드 및 테스트를 실행합니다.
# 개발자들은 자주 코드를 통합할 수 있으며, 코드가 충돌되는 현상(conflict)을 미리 발견할 수 있습니다.
# 프로덕트 품질 관리 및 버그 발견이 빨라집니다.

# CD : 지속적 배포 (Continuous Deployment 또는 Continuous Delivery)
# 지속적으로 통합된 코드를 자동으로 프로덕션 환경에 배포하는 프로세스입니다.
# 코드 변경 사항이 테스트 및 승인(approve)을 거쳐 자동으로 프로덕션 환경에 배포(merge to main)됩니다.
# 새로운 기능과 버그 수정 사항이 실제 사용자에게 빠르게 제공됩니다.
# 사용자 피드백을 수집하고 제품을 개선하는 속도를 향상시킬 수 있습니다.

# GitHub 에서 Actions 메뉴를 통해 DevOps 기능을 제공
# 워크플로우는 YAML (야믈) 파일로 작성
# 작성된 내용에 따라 자동으로 트리거 이벤트 발생

# 이 워크플로우의 이름입니다. GitHub Actions에서 이 워크플로우를 식별하는 데 사용됩니다.
name: Development Operations
# 워크플로우를 트리거하는 이벤트를 정의합니다.
on:
  # 리포지토리에 푸시가 발생했을 때 워크플로우가 실행됩니다.
  push:
    # devops 브랜치에 푸시될 때 워크플로우가 실행됩니다.
    branches:
      - devops_backup

# 워크플로우에서 실행될 작업을 정의합니다.
jobs:
  checkout:
    # doker 에서 작업을 실행할 환경을 정의합니다. (CI 서버 = 로컬 서버 역할)
    # github action 에서 Linux OS 는 ubuntu 만 사용
    # CentOS 의 경우에도 ubuntu 사용
    runs-on: ubuntu-22.04
    # runs-on: ubuntu-latest
    # 작업 내에서 수행할 단계를 정의합니다.
    steps:
      # 수행할 consol 명령어 작성
      - run: ls -al   # 목록이 비어 있음 ([.], [..] 경로만 존재)
      # steps 키 하위의 uses 키에 사용하고자 하는 액션의 위치를 {소유자}/{저장소명}@{참조자}의 형태로 명시
      # GitHub 에서 제공하는 체크아웃 액션의 소유자는 actions 이고, 저장소 이름은 checkout 이며 2024-05-30 기준으로 사용 가능한 최신 버전은 v4 이다.
      # actions : 빈번하게 필요한 반복 단계를 재사용하기 용이하도록 GitHub Actions에서 제공되는 일종의 작업 공유 매커니즘
      # GitHub Marketplace 를 통해 GitHub 뿐만 아니라 다양한 써드 파티 업체들이 공개해놓은 액션을 사용 가능
      # checkout : 체크아웃에 필요한 일련의 과정을 묶어서 제공하는 액션 (repository 에서 CI 서버로 내려받은 후 (fetch, 사용자 인증 포함) 특정 브랜치로 전환)
      # fetch-depth : 설정한 만큼의 커밋만 내려 받음 (기본값: 1 (최근 1건의 커밋만 내려 받음), 0으로 설정하면 전체 커밋 이력을 내려 받음)
      # v4 : GitHub 에서 제공하는 체크아웃 액션의 최신 버전
      - uses: actions/checkout@v4
        # uses 행위에 입력 파라미터를 넘김
        with:
          # {소유자}/{저장소명} 형태로 저장소를 지정
          repository: actions/checkout
          # 브랜치명이나 태그명 또는 커밋 해시값을 지정
          ref: v4
          # 최근 3개의 변경 이력을 내려 받음
#          fetch-depth: 3
          # CI 서버의 최상위 작업 디렉토리 대신에 그 하위에 있는 다른 폴더로 코드를 내려 받음
          # 최상위 작업 디렉토리에 test-source 폴더가 존재하지 않는 경우 test-source 폴더 생성 (CI 서버에 생성됨)
          # test-source 폴더에서 체크아웃
#          path: test-source
      # 수행할 consol 명령어 작성
      - run: ls -al   # 브랜치를 체크아웃하여 파일 목록이 보임
#      - run: ls -al test-source
      # 수행할 consol 명령어 작성
#      - run: cat test-source/.github/workflows/devops.yml
      # test-source 폴더에서 체크아웃하게되면 최상위 폴더에 github 폴더가 존재하지 않아서 오류 발생
#      - run: cat .github/workflows/devops.yml
      # 변경 이력 출력
#      - run: git log --pretty=oneline
